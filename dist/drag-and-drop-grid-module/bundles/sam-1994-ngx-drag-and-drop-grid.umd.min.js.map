{"version":3,"sources":["ng://@sam-1994/ngx-drag-and-drop-grid/lib/sam-drag-and-drop-grid.component.ts","ng://@sam-1994/ngx-drag-and-drop-grid/lib/sam-drag-and-drop-grid.module.ts"],"names":["SamDragAndDropListDataDirective","template","this","Directive","args","selector","TemplateRef","SamDragAndDropListContentOutletDirective","viewContainer","ViewContainerRef","SamDragAndDropGridComponent","changeDetector","viewportRuler","_this","columnNumber","enter","drag","drop","placeholder","activeContainer","phElement","element","nativeElement","sourceElement","dropContainer","dropElement","dragIndex","Array","from","parentElement","children","indexOf","source","dropIndex","sourceIndex","style","width","clientWidth","height","clientHeight","removeChild","targetIndex","target","display","insertBefore","nextSibling","offsetLeft","offsetTop","__isTouchEvent","event","type","startsWith","__isInsideDropListClientRect","dropList","x","y","_a","getBoundingClientRect","top","bottom","left","right","prototype","ngAfterViewInit","renderItems","ngOnChanges","changes","items","contentOutlet","detectChanges","toArray","forEach","outlet","index","clear","createEmbeddedView","dragAndDropListData","first","$implicit","dragMoved","e","point","getPointerPositionOnPage","listGroup","_items","parent","appendChild","moveItemInArray","touches","changedTouches","scrollPosition","getViewportScrollPosition","pageX","pageY","Component","ChangeDetectorRef","ViewportRuler","Input","ViewChildren","ContentChildren","ViewChild","CdkDropListGroup","static","CdkDropList","SamDragAndDropGridModule","NgModule","declarations","imports","CommonModule","DragDropModule","exports"],"mappings":"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","sourcesContent":["import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  QueryList,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewChildren,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport {CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup, moveItemInArray} from '@angular/cdk/drag-drop';\r\nimport {ViewportRuler} from '@angular/cdk/overlay';\r\n\r\n@Directive({\r\n  selector: '[samDragAndDropListData]'\r\n})\r\nexport class SamDragAndDropListDataDirective {\r\n  constructor(public template: TemplateRef<any>) {\r\n  }\r\n}\r\n\r\n@Directive({selector: '[samContentOutlet]'})\r\nexport class SamDragAndDropListContentOutletDirective {\r\n  constructor(public viewContainer: ViewContainerRef) {\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sam-drag-and-drop-grid',\r\n  templateUrl: './sam-drag-and-drop-grid.component.html',\r\n  styleUrls: ['./sam-drag-and-drop-grid.component.sass']\r\n})\r\nexport class SamDragAndDropGridComponent implements AfterViewInit, OnChanges {\r\n\r\n  @Input() public items: Array<any>;\r\n  @Input() public columnNumber = 1;\r\n\r\n  @ViewChildren(SamDragAndDropListContentOutletDirective) contentOutlet: QueryList<SamDragAndDropListContentOutletDirective>;\r\n  @ContentChildren(SamDragAndDropListDataDirective) dragAndDropListData: QueryList<SamDragAndDropListDataDirective>;\r\n\r\n  @ViewChild(CdkDropListGroup, {static: true}) listGroup: CdkDropListGroup<CdkDropList>;\r\n  @ViewChild(CdkDropList, {static: true}) placeholder: CdkDropList;\r\n\r\n  public target: CdkDropList;\r\n  public targetIndex: number;\r\n  public source: CdkDropList;\r\n  public sourceIndex: number;\r\n  public activeContainer;\r\n\r\n  private static __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return event.type.startsWith('touch');\r\n  }\r\n\r\n  private static __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\r\n    const {top, bottom, left, right} = dropList.element.nativeElement.getBoundingClientRect();\r\n    return y >= top && y <= bottom && x >= left && x <= right;\r\n  }\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef, private viewportRuler: ViewportRuler) {\r\n    this.target = null;\r\n    this.source = null;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.renderItems();\r\n\r\n    const phElement = this.placeholder.element.nativeElement;\r\n\r\n    phElement.style.display = 'none';\r\n    phElement.parentElement.removeChild(phElement);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.items) {\r\n\r\n      if (!this.contentOutlet) {\r\n        return;\r\n      }\r\n      this.renderItems();\r\n    }\r\n  }\r\n\r\n  public renderItems() {\r\n    this.changeDetector.detectChanges();\r\n\r\n    this.contentOutlet.toArray().forEach((outlet: SamDragAndDropListContentOutletDirective, index: number) => {\r\n      outlet.viewContainer.clear();\r\n      outlet.viewContainer.createEmbeddedView(\r\n        this.dragAndDropListData.first.template, {\r\n          $implicit: this.items[index],\r\n          index\r\n        });\r\n    });\r\n    this.changeDetector.detectChanges();\r\n  }\r\n\r\n  dragMoved(e: CdkDragMove) {\r\n    const point = this.getPointerPositionOnPage(e.event);\r\n\r\n    this.listGroup._items.forEach(dropList => {\r\n      if (SamDragAndDropGridComponent.__isInsideDropListClientRect(dropList, point.x, point.y)) {\r\n        this.activeContainer = dropList;\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  public enter = (drag: CdkDrag, drop: CdkDropList) => {\r\n    if (drop === this.placeholder) {\r\n      return true;\r\n    }\r\n\r\n    if (drop !== this.activeContainer) {\r\n      return false;\r\n    }\r\n\r\n    const phElement = this.placeholder.element.nativeElement;\r\n    const sourceElement = drag.dropContainer.element.nativeElement;\r\n    const dropElement = drop.element.nativeElement;\r\n\r\n    const dragIndex = Array.from(dropElement.parentElement.children).indexOf(this.source ? phElement : sourceElement);\r\n    const dropIndex = Array.from(dropElement.parentElement.children).indexOf(dropElement);\r\n\r\n    if (!this.source) {\r\n      this.sourceIndex = dragIndex;\r\n      this.source = drag.dropContainer;\r\n\r\n      phElement.style.width = sourceElement.clientWidth + 'px';\r\n      phElement.style.height = sourceElement.clientHeight + 'px';\r\n\r\n      sourceElement.parentElement.removeChild(sourceElement);\r\n    }\r\n\r\n    this.targetIndex = dropIndex;\r\n    this.target = drop;\r\n\r\n    phElement.style.display = '';\r\n    dropElement.parentElement.insertBefore(phElement, (dropIndex > dragIndex\r\n      ? dropElement.nextSibling : dropElement));\r\n\r\n    this.placeholder.enter(drag, drag.element.nativeElement.offsetLeft, drag.element.nativeElement.offsetTop);\r\n    return false;\r\n    // tslint:disable-next-line:semicolon\r\n  };\r\n\r\n  drop() {\r\n    if (!this.target) {\r\n      return;\r\n    }\r\n\r\n    const phElement = this.placeholder.element.nativeElement;\r\n    const parent = phElement.parentElement;\r\n\r\n    phElement.style.display = 'none';\r\n\r\n    parent.removeChild(phElement);\r\n    parent.appendChild(phElement);\r\n    parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\r\n\r\n    this.target = null;\r\n    this.source = null;\r\n\r\n    if (this.sourceIndex !== this.targetIndex) {\r\n      moveItemInArray(this.items, this.sourceIndex, this.targetIndex);\r\n      this.renderItems();\r\n    }\r\n  }\r\n\r\n  /** Determines the point of the page that was touched by the user. */\r\n  getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\r\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n    const point = SamDragAndDropGridComponent.__isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\r\n    const scrollPosition = this.viewportRuler.getViewportScrollPosition();\r\n\r\n    return {\r\n      x: point.pageX - scrollPosition.left,\r\n      y: point.pageY - scrollPosition.top\r\n    };\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {\r\n  SamDragAndDropGridComponent,\r\n  SamDragAndDropListContentOutletDirective,\r\n  SamDragAndDropListDataDirective\r\n} from './sam-drag-and-drop-grid.component';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SamDragAndDropGridComponent,\r\n    SamDragAndDropListContentOutletDirective,\r\n    SamDragAndDropListDataDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    DragDropModule\r\n  ],\r\n  exports: [\r\n    SamDragAndDropGridComponent,\r\n    SamDragAndDropListContentOutletDirective,\r\n    SamDragAndDropListDataDirective\r\n  ]\r\n})\r\nexport class SamDragAndDropGridModule {\r\n}\r\n"]}